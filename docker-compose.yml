networks:
  app-network:
    driver: bridge

services:
  web:
    build: .
    ports:
      - "5003:5000"
    environment:
      - FLASK_APP=app.py
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - DATABASE_URL=postgresql://admin:admin@db/previanza
      - MAIL_SERVER=${MAIL_SERVER}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USE_TLS=${MAIL_USE_TLS}
      - MAIL_USE_SSL=${MAIL_USE_SSL}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - MAIL_DEFAULT_SENDER=${MAIL_DEFAULT_SENDER}
      - SECRET_KEY=${SECRET_KEY}
      - UPLOAD_FOLDER=/app/static/uploads
      - PRODUCT_IMAGES_FOLDER=/app/static/img/products
      - SEND_FILE_MAX_AGE_DEFAULT=0
    volumes:
      - ./static:/app/static:rw
      - ./migrations:/app/migrations:rw
      - ./reports:/app/reports:rw
      - type: volume
        source: uploaded_files
        target: /app/static/uploads
        volume:
          nocopy: true
      - type: volume
        source: product_images
        target: /app/static/img/products
        volume:
          nocopy: true
      - ./gunicorn_config.py:/app/gunicorn_config.py
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    restart: always
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "5000"]
      interval: 30s
      timeout: 10s
      retries: 3
    user: "root"
    entrypoint: ["/app/docker-entrypoint.sh"]
    command: ["gunicorn", "--bind", "0.0.0.0:5000", "--workers", "4", "--config", "/app/gunicorn_config.py", "wsgi:application"]

  db:
    image: postgres:17
    hostname: db
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=previanza
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5436:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d previanza"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:alpine
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./static:/usr/share/nginx/html/static:ro
      - uploaded_files:/usr/share/nginx/html/static/uploads:ro
      - product_images:/usr/share/nginx/html/static/img/products:ro
    depends_on:
      - web
    networks:
      - app-network

  redis:
    image: redis:latest
    ports:
      - "6381:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploaded_files:
    driver: local
  product_images:
    driver: local
  migrations_data:
    driver: local